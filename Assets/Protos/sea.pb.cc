// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sea.proto

#include "sea.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sea {
constexpr StatusFeedback::StatusFeedback(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : run_state_(0)

  , work_mode_(0)

  , current_position_(0)
  , current_velocity_(0)
  , encoder1_feedback_(0)
  , encoder2_feedback_(0)
  , external_force_(0)
  , stiffness_(0)
  , damping_(0){}
struct StatusFeedbackDefaultTypeInternal {
  constexpr StatusFeedbackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusFeedbackDefaultTypeInternal() {}
  union {
    StatusFeedback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusFeedbackDefaultTypeInternal _StatusFeedback_default_instance_;
constexpr ConfigFeedback::ConfigFeedback(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoder1_resolution_(0)
  , encoder2_resolution_(0)
  , spring_stiffness_(0){}
struct ConfigFeedbackDefaultTypeInternal {
  constexpr ConfigFeedbackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigFeedbackDefaultTypeInternal() {}
  union {
    ConfigFeedback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigFeedbackDefaultTypeInternal _ConfigFeedback_default_instance_;
constexpr ControlFeedback::ControlFeedback(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ControlFeedbackDefaultTypeInternal {
  constexpr ControlFeedbackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlFeedbackDefaultTypeInternal() {}
  union {
    ControlFeedback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlFeedbackDefaultTypeInternal _ControlFeedback_default_instance_;
constexpr SetStiffnessCommand::SetStiffnessCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stiffness_(0){}
struct SetStiffnessCommandDefaultTypeInternal {
  constexpr SetStiffnessCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetStiffnessCommandDefaultTypeInternal() {}
  union {
    SetStiffnessCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetStiffnessCommandDefaultTypeInternal _SetStiffnessCommand_default_instance_;
constexpr SetDampingCommand::SetDampingCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : damping_(0){}
struct SetDampingCommandDefaultTypeInternal {
  constexpr SetDampingCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetDampingCommandDefaultTypeInternal() {}
  union {
    SetDampingCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetDampingCommandDefaultTypeInternal _SetDampingCommand_default_instance_;
constexpr SetWorkModeCommand::SetWorkModeCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : work_mode_(0)
{}
struct SetWorkModeCommandDefaultTypeInternal {
  constexpr SetWorkModeCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetWorkModeCommandDefaultTypeInternal() {}
  union {
    SetWorkModeCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetWorkModeCommandDefaultTypeInternal _SetWorkModeCommand_default_instance_;
constexpr EnableCommand::EnableCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enable_(false){}
struct EnableCommandDefaultTypeInternal {
  constexpr EnableCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnableCommandDefaultTypeInternal() {}
  union {
    EnableCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnableCommandDefaultTypeInternal _EnableCommand_default_instance_;
constexpr SetPositionCommand::SetPositionCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(0){}
struct SetPositionCommandDefaultTypeInternal {
  constexpr SetPositionCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetPositionCommandDefaultTypeInternal() {}
  union {
    SetPositionCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetPositionCommandDefaultTypeInternal _SetPositionCommand_default_instance_;
constexpr SetVelocityCommand::SetVelocityCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : velocity_(0){}
struct SetVelocityCommandDefaultTypeInternal {
  constexpr SetVelocityCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetVelocityCommandDefaultTypeInternal() {}
  union {
    SetVelocityCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetVelocityCommandDefaultTypeInternal _SetVelocityCommand_default_instance_;
constexpr ControlCommand::ControlCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ControlCommandDefaultTypeInternal {
  constexpr ControlCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlCommandDefaultTypeInternal() {}
  union {
    ControlCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlCommandDefaultTypeInternal _ControlCommand_default_instance_;
}  // namespace sea
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sea_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sea_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sea_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sea_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sea::StatusFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sea::StatusFeedback, run_state_),
  PROTOBUF_FIELD_OFFSET(::sea::StatusFeedback, work_mode_),
  PROTOBUF_FIELD_OFFSET(::sea::StatusFeedback, current_position_),
  PROTOBUF_FIELD_OFFSET(::sea::StatusFeedback, current_velocity_),
  PROTOBUF_FIELD_OFFSET(::sea::StatusFeedback, encoder1_feedback_),
  PROTOBUF_FIELD_OFFSET(::sea::StatusFeedback, encoder2_feedback_),
  PROTOBUF_FIELD_OFFSET(::sea::StatusFeedback, external_force_),
  PROTOBUF_FIELD_OFFSET(::sea::StatusFeedback, stiffness_),
  PROTOBUF_FIELD_OFFSET(::sea::StatusFeedback, damping_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sea::ConfigFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sea::ConfigFeedback, encoder1_resolution_),
  PROTOBUF_FIELD_OFFSET(::sea::ConfigFeedback, encoder2_resolution_),
  PROTOBUF_FIELD_OFFSET(::sea::ConfigFeedback, spring_stiffness_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sea::ControlFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sea::ControlFeedback, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sea::ControlFeedback, feedback_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sea::SetStiffnessCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sea::SetStiffnessCommand, stiffness_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sea::SetDampingCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sea::SetDampingCommand, damping_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sea::SetWorkModeCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sea::SetWorkModeCommand, work_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sea::EnableCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sea::EnableCommand, enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sea::SetPositionCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sea::SetPositionCommand, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sea::SetVelocityCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sea::SetVelocityCommand, velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sea::ControlCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sea::ControlCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sea::ControlCommand, command_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sea::StatusFeedback)},
  { 14, -1, sizeof(::sea::ConfigFeedback)},
  { 22, -1, sizeof(::sea::ControlFeedback)},
  { 30, -1, sizeof(::sea::SetStiffnessCommand)},
  { 36, -1, sizeof(::sea::SetDampingCommand)},
  { 42, -1, sizeof(::sea::SetWorkModeCommand)},
  { 48, -1, sizeof(::sea::EnableCommand)},
  { 54, -1, sizeof(::sea::SetPositionCommand)},
  { 60, -1, sizeof(::sea::SetVelocityCommand)},
  { 66, -1, sizeof(::sea::ControlCommand)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sea::_StatusFeedback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sea::_ConfigFeedback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sea::_ControlFeedback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sea::_SetStiffnessCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sea::_SetDampingCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sea::_SetWorkModeCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sea::_EnableCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sea::_SetPositionCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sea::_SetVelocityCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sea::_ControlCommand_default_instance_),
};

const char descriptor_table_protodef_sea_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tsea.proto\022\003sea\"\372\001\n\016StatusFeedback\022 \n\tr"
  "un_state\030\001 \001(\0162\r.sea.RunState\022 \n\twork_mo"
  "de\030\002 \001(\0162\r.sea.WorkMode\022\030\n\020current_posit"
  "ion\030\003 \001(\001\022\030\n\020current_velocity\030\004 \001(\001\022\031\n\021e"
  "ncoder1_feedback\030\005 \001(\005\022\031\n\021encoder2_feedb"
  "ack\030\006 \001(\005\022\026\n\016external_force\030\007 \001(\001\022\021\n\tsti"
  "ffness\030\010 \001(\001\022\017\n\007damping\030\t \001(\001\"d\n\016ConfigF"
  "eedback\022\033\n\023encoder1_resolution\030\001 \001(\005\022\033\n\023"
  "encoder2_resolution\030\002 \001(\005\022\030\n\020spring_stif"
  "fness\030\003 \001(\005\"k\n\017ControlFeedback\022%\n\006status"
  "\030\001 \001(\0132\023.sea.StatusFeedbackH\000\022%\n\006config\030"
  "\002 \001(\0132\023.sea.ConfigFeedbackH\000B\n\n\010feedback"
  "\"(\n\023SetStiffnessCommand\022\021\n\tstiffness\030\001 \001"
  "(\001\"$\n\021SetDampingCommand\022\017\n\007damping\030\001 \001(\001"
  "\"6\n\022SetWorkModeCommand\022 \n\twork_mode\030\001 \001("
  "\0162\r.sea.WorkMode\"\037\n\rEnableCommand\022\016\n\006ena"
  "ble\030\001 \001(\010\"&\n\022SetPositionCommand\022\020\n\010posit"
  "ion\030\001 \001(\001\"&\n\022SetVelocityCommand\022\020\n\010veloc"
  "ity\030\001 \001(\001\"\267\002\n\016ControlCommand\0221\n\rset_stif"
  "fness\030\001 \001(\0132\030.sea.SetStiffnessCommandH\000\022"
  "-\n\013set_damping\030\002 \001(\0132\026.sea.SetDampingCom"
  "mandH\000\0220\n\rset_work_mode\030\003 \001(\0132\027.sea.SetW"
  "orkModeCommandH\000\022$\n\006enable\030\004 \001(\0132\022.sea.E"
  "nableCommandH\000\022/\n\014set_position\030\005 \001(\0132\027.s"
  "ea.SetPositionCommandH\000\022/\n\014set_velocity\030"
  "\006 \001(\0132\027.sea.SetVelocityCommandH\000B\t\n\007comm"
  "and*J\n\010RunState\022\014\n\010DISABLED\020\000\022\013\n\007STOPPED"
  "\020\001\022\013\n\007RUNNING\020\002\022\013\n\007UNKNOWN\020\003\022\t\n\005ERROR\020\004*"
  "E\n\010WorkMode\022\r\n\tIMPEDANCE\020\000\022\016\n\nZERO_FORCE"
  "\020\001\022\014\n\010POSITION\020\002\022\014\n\010VELOCITY\020\003b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sea_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sea_2eproto = {
  false, false, 1198, descriptor_table_protodef_sea_2eproto, "sea.proto", 
  &descriptor_table_sea_2eproto_once, nullptr, 0, 10,
  schemas, file_default_instances, TableStruct_sea_2eproto::offsets,
  file_level_metadata_sea_2eproto, file_level_enum_descriptors_sea_2eproto, file_level_service_descriptors_sea_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sea_2eproto_getter() {
  return &descriptor_table_sea_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sea_2eproto(&descriptor_table_sea_2eproto);
namespace sea {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RunState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sea_2eproto);
  return file_level_enum_descriptors_sea_2eproto[0];
}
bool RunState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sea_2eproto);
  return file_level_enum_descriptors_sea_2eproto[1];
}
bool WorkMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class StatusFeedback::_Internal {
 public:
};

StatusFeedback::StatusFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sea.StatusFeedback)
}
StatusFeedback::StatusFeedback(const StatusFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&run_state_, &from.run_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&damping_) -
    reinterpret_cast<char*>(&run_state_)) + sizeof(damping_));
  // @@protoc_insertion_point(copy_constructor:sea.StatusFeedback)
}

inline void StatusFeedback::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&run_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&damping_) -
    reinterpret_cast<char*>(&run_state_)) + sizeof(damping_));
}

StatusFeedback::~StatusFeedback() {
  // @@protoc_insertion_point(destructor:sea.StatusFeedback)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatusFeedback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StatusFeedback::ArenaDtor(void* object) {
  StatusFeedback* _this = reinterpret_cast< StatusFeedback* >(object);
  (void)_this;
}
void StatusFeedback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusFeedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:sea.StatusFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&run_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&damping_) -
      reinterpret_cast<char*>(&run_state_)) + sizeof(damping_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusFeedback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sea.RunState run_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_run_state(static_cast<::sea::RunState>(val));
        } else goto handle_unusual;
        continue;
      // .sea.WorkMode work_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_work_mode(static_cast<::sea::WorkMode>(val));
        } else goto handle_unusual;
        continue;
      // double current_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          current_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double current_velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          current_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 encoder1_feedback = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          encoder1_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 encoder2_feedback = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          encoder2_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double external_force = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          external_force_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double stiffness = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          stiffness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double damping = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          damping_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusFeedback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sea.StatusFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea.RunState run_state = 1;
  if (this->_internal_run_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_run_state(), target);
  }

  // .sea.WorkMode work_mode = 2;
  if (this->_internal_work_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_work_mode(), target);
  }

  // double current_position = 3;
  if (!(this->_internal_current_position() <= 0 && this->_internal_current_position() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_current_position(), target);
  }

  // double current_velocity = 4;
  if (!(this->_internal_current_velocity() <= 0 && this->_internal_current_velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_current_velocity(), target);
  }

  // int32 encoder1_feedback = 5;
  if (this->_internal_encoder1_feedback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_encoder1_feedback(), target);
  }

  // int32 encoder2_feedback = 6;
  if (this->_internal_encoder2_feedback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_encoder2_feedback(), target);
  }

  // double external_force = 7;
  if (!(this->_internal_external_force() <= 0 && this->_internal_external_force() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_external_force(), target);
  }

  // double stiffness = 8;
  if (!(this->_internal_stiffness() <= 0 && this->_internal_stiffness() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_stiffness(), target);
  }

  // double damping = 9;
  if (!(this->_internal_damping() <= 0 && this->_internal_damping() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_damping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea.StatusFeedback)
  return target;
}

size_t StatusFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea.StatusFeedback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sea.RunState run_state = 1;
  if (this->_internal_run_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_run_state());
  }

  // .sea.WorkMode work_mode = 2;
  if (this->_internal_work_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_work_mode());
  }

  // double current_position = 3;
  if (!(this->_internal_current_position() <= 0 && this->_internal_current_position() >= 0)) {
    total_size += 1 + 8;
  }

  // double current_velocity = 4;
  if (!(this->_internal_current_velocity() <= 0 && this->_internal_current_velocity() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 encoder1_feedback = 5;
  if (this->_internal_encoder1_feedback() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_encoder1_feedback());
  }

  // int32 encoder2_feedback = 6;
  if (this->_internal_encoder2_feedback() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_encoder2_feedback());
  }

  // double external_force = 7;
  if (!(this->_internal_external_force() <= 0 && this->_internal_external_force() >= 0)) {
    total_size += 1 + 8;
  }

  // double stiffness = 8;
  if (!(this->_internal_stiffness() <= 0 && this->_internal_stiffness() >= 0)) {
    total_size += 1 + 8;
  }

  // double damping = 9;
  if (!(this->_internal_damping() <= 0 && this->_internal_damping() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusFeedback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatusFeedback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusFeedback::GetClassData() const { return &_class_data_; }

void StatusFeedback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StatusFeedback *>(to)->MergeFrom(
      static_cast<const StatusFeedback &>(from));
}


void StatusFeedback::MergeFrom(const StatusFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea.StatusFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_run_state() != 0) {
    _internal_set_run_state(from._internal_run_state());
  }
  if (from._internal_work_mode() != 0) {
    _internal_set_work_mode(from._internal_work_mode());
  }
  if (!(from._internal_current_position() <= 0 && from._internal_current_position() >= 0)) {
    _internal_set_current_position(from._internal_current_position());
  }
  if (!(from._internal_current_velocity() <= 0 && from._internal_current_velocity() >= 0)) {
    _internal_set_current_velocity(from._internal_current_velocity());
  }
  if (from._internal_encoder1_feedback() != 0) {
    _internal_set_encoder1_feedback(from._internal_encoder1_feedback());
  }
  if (from._internal_encoder2_feedback() != 0) {
    _internal_set_encoder2_feedback(from._internal_encoder2_feedback());
  }
  if (!(from._internal_external_force() <= 0 && from._internal_external_force() >= 0)) {
    _internal_set_external_force(from._internal_external_force());
  }
  if (!(from._internal_stiffness() <= 0 && from._internal_stiffness() >= 0)) {
    _internal_set_stiffness(from._internal_stiffness());
  }
  if (!(from._internal_damping() <= 0 && from._internal_damping() >= 0)) {
    _internal_set_damping(from._internal_damping());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusFeedback::CopyFrom(const StatusFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea.StatusFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusFeedback::IsInitialized() const {
  return true;
}

void StatusFeedback::InternalSwap(StatusFeedback* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusFeedback, damping_)
      + sizeof(StatusFeedback::damping_)
      - PROTOBUF_FIELD_OFFSET(StatusFeedback, run_state_)>(
          reinterpret_cast<char*>(&run_state_),
          reinterpret_cast<char*>(&other->run_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusFeedback::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sea_2eproto_getter, &descriptor_table_sea_2eproto_once,
      file_level_metadata_sea_2eproto[0]);
}

// ===================================================================

class ConfigFeedback::_Internal {
 public:
};

ConfigFeedback::ConfigFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sea.ConfigFeedback)
}
ConfigFeedback::ConfigFeedback(const ConfigFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&encoder1_resolution_, &from.encoder1_resolution_,
    static_cast<size_t>(reinterpret_cast<char*>(&spring_stiffness_) -
    reinterpret_cast<char*>(&encoder1_resolution_)) + sizeof(spring_stiffness_));
  // @@protoc_insertion_point(copy_constructor:sea.ConfigFeedback)
}

inline void ConfigFeedback::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&encoder1_resolution_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&spring_stiffness_) -
    reinterpret_cast<char*>(&encoder1_resolution_)) + sizeof(spring_stiffness_));
}

ConfigFeedback::~ConfigFeedback() {
  // @@protoc_insertion_point(destructor:sea.ConfigFeedback)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigFeedback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConfigFeedback::ArenaDtor(void* object) {
  ConfigFeedback* _this = reinterpret_cast< ConfigFeedback* >(object);
  (void)_this;
}
void ConfigFeedback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigFeedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:sea.ConfigFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&encoder1_resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spring_stiffness_) -
      reinterpret_cast<char*>(&encoder1_resolution_)) + sizeof(spring_stiffness_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigFeedback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 encoder1_resolution = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          encoder1_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 encoder2_resolution = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          encoder2_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spring_stiffness = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          spring_stiffness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigFeedback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sea.ConfigFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 encoder1_resolution = 1;
  if (this->_internal_encoder1_resolution() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_encoder1_resolution(), target);
  }

  // int32 encoder2_resolution = 2;
  if (this->_internal_encoder2_resolution() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_encoder2_resolution(), target);
  }

  // int32 spring_stiffness = 3;
  if (this->_internal_spring_stiffness() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_spring_stiffness(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea.ConfigFeedback)
  return target;
}

size_t ConfigFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea.ConfigFeedback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 encoder1_resolution = 1;
  if (this->_internal_encoder1_resolution() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_encoder1_resolution());
  }

  // int32 encoder2_resolution = 2;
  if (this->_internal_encoder2_resolution() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_encoder2_resolution());
  }

  // int32 spring_stiffness = 3;
  if (this->_internal_spring_stiffness() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spring_stiffness());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigFeedback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigFeedback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigFeedback::GetClassData() const { return &_class_data_; }

void ConfigFeedback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ConfigFeedback *>(to)->MergeFrom(
      static_cast<const ConfigFeedback &>(from));
}


void ConfigFeedback::MergeFrom(const ConfigFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea.ConfigFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_encoder1_resolution() != 0) {
    _internal_set_encoder1_resolution(from._internal_encoder1_resolution());
  }
  if (from._internal_encoder2_resolution() != 0) {
    _internal_set_encoder2_resolution(from._internal_encoder2_resolution());
  }
  if (from._internal_spring_stiffness() != 0) {
    _internal_set_spring_stiffness(from._internal_spring_stiffness());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigFeedback::CopyFrom(const ConfigFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea.ConfigFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigFeedback::IsInitialized() const {
  return true;
}

void ConfigFeedback::InternalSwap(ConfigFeedback* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigFeedback, spring_stiffness_)
      + sizeof(ConfigFeedback::spring_stiffness_)
      - PROTOBUF_FIELD_OFFSET(ConfigFeedback, encoder1_resolution_)>(
          reinterpret_cast<char*>(&encoder1_resolution_),
          reinterpret_cast<char*>(&other->encoder1_resolution_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigFeedback::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sea_2eproto_getter, &descriptor_table_sea_2eproto_once,
      file_level_metadata_sea_2eproto[1]);
}

// ===================================================================

class ControlFeedback::_Internal {
 public:
  static const ::sea::StatusFeedback& status(const ControlFeedback* msg);
  static const ::sea::ConfigFeedback& config(const ControlFeedback* msg);
};

const ::sea::StatusFeedback&
ControlFeedback::_Internal::status(const ControlFeedback* msg) {
  return *msg->feedback_.status_;
}
const ::sea::ConfigFeedback&
ControlFeedback::_Internal::config(const ControlFeedback* msg) {
  return *msg->feedback_.config_;
}
void ControlFeedback::set_allocated_status(::sea::StatusFeedback* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_feedback();
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sea::StatusFeedback>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
    feedback_.status_ = status;
  }
  // @@protoc_insertion_point(field_set_allocated:sea.ControlFeedback.status)
}
void ControlFeedback::set_allocated_config(::sea::ConfigFeedback* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_feedback();
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sea::ConfigFeedback>::GetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
    feedback_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:sea.ControlFeedback.config)
}
ControlFeedback::ControlFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sea.ControlFeedback)
}
ControlFeedback::ControlFeedback(const ControlFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_feedback();
  switch (from.feedback_case()) {
    case kStatus: {
      _internal_mutable_status()->::sea::StatusFeedback::MergeFrom(from._internal_status());
      break;
    }
    case kConfig: {
      _internal_mutable_config()->::sea::ConfigFeedback::MergeFrom(from._internal_config());
      break;
    }
    case FEEDBACK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sea.ControlFeedback)
}

inline void ControlFeedback::SharedCtor() {
clear_has_feedback();
}

ControlFeedback::~ControlFeedback() {
  // @@protoc_insertion_point(destructor:sea.ControlFeedback)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlFeedback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_feedback()) {
    clear_feedback();
  }
}

void ControlFeedback::ArenaDtor(void* object) {
  ControlFeedback* _this = reinterpret_cast< ControlFeedback* >(object);
  (void)_this;
}
void ControlFeedback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlFeedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlFeedback::clear_feedback() {
// @@protoc_insertion_point(one_of_clear_start:sea.ControlFeedback)
  switch (feedback_case()) {
    case kStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete feedback_.status_;
      }
      break;
    }
    case kConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete feedback_.config_;
      }
      break;
    }
    case FEEDBACK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FEEDBACK_NOT_SET;
}


void ControlFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:sea.ControlFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_feedback();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlFeedback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sea.StatusFeedback status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sea.ConfigFeedback config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlFeedback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sea.ControlFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea.StatusFeedback status = 1;
  if (_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .sea.ConfigFeedback config = 2;
  if (_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea.ControlFeedback)
  return target;
}

size_t ControlFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea.ControlFeedback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (feedback_case()) {
    // .sea.StatusFeedback status = 1;
    case kStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feedback_.status_);
      break;
    }
    // .sea.ConfigFeedback config = 2;
    case kConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feedback_.config_);
      break;
    }
    case FEEDBACK_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlFeedback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlFeedback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlFeedback::GetClassData() const { return &_class_data_; }

void ControlFeedback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ControlFeedback *>(to)->MergeFrom(
      static_cast<const ControlFeedback &>(from));
}


void ControlFeedback::MergeFrom(const ControlFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea.ControlFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.feedback_case()) {
    case kStatus: {
      _internal_mutable_status()->::sea::StatusFeedback::MergeFrom(from._internal_status());
      break;
    }
    case kConfig: {
      _internal_mutable_config()->::sea::ConfigFeedback::MergeFrom(from._internal_config());
      break;
    }
    case FEEDBACK_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlFeedback::CopyFrom(const ControlFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea.ControlFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlFeedback::IsInitialized() const {
  return true;
}

void ControlFeedback::InternalSwap(ControlFeedback* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(feedback_, other->feedback_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlFeedback::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sea_2eproto_getter, &descriptor_table_sea_2eproto_once,
      file_level_metadata_sea_2eproto[2]);
}

// ===================================================================

class SetStiffnessCommand::_Internal {
 public:
};

SetStiffnessCommand::SetStiffnessCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sea.SetStiffnessCommand)
}
SetStiffnessCommand::SetStiffnessCommand(const SetStiffnessCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stiffness_ = from.stiffness_;
  // @@protoc_insertion_point(copy_constructor:sea.SetStiffnessCommand)
}

inline void SetStiffnessCommand::SharedCtor() {
stiffness_ = 0;
}

SetStiffnessCommand::~SetStiffnessCommand() {
  // @@protoc_insertion_point(destructor:sea.SetStiffnessCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetStiffnessCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetStiffnessCommand::ArenaDtor(void* object) {
  SetStiffnessCommand* _this = reinterpret_cast< SetStiffnessCommand* >(object);
  (void)_this;
}
void SetStiffnessCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetStiffnessCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetStiffnessCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:sea.SetStiffnessCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stiffness_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetStiffnessCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double stiffness = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          stiffness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetStiffnessCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sea.SetStiffnessCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double stiffness = 1;
  if (!(this->_internal_stiffness() <= 0 && this->_internal_stiffness() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_stiffness(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea.SetStiffnessCommand)
  return target;
}

size_t SetStiffnessCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea.SetStiffnessCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double stiffness = 1;
  if (!(this->_internal_stiffness() <= 0 && this->_internal_stiffness() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetStiffnessCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetStiffnessCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetStiffnessCommand::GetClassData() const { return &_class_data_; }

void SetStiffnessCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetStiffnessCommand *>(to)->MergeFrom(
      static_cast<const SetStiffnessCommand &>(from));
}


void SetStiffnessCommand::MergeFrom(const SetStiffnessCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea.SetStiffnessCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_stiffness() <= 0 && from._internal_stiffness() >= 0)) {
    _internal_set_stiffness(from._internal_stiffness());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetStiffnessCommand::CopyFrom(const SetStiffnessCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea.SetStiffnessCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetStiffnessCommand::IsInitialized() const {
  return true;
}

void SetStiffnessCommand::InternalSwap(SetStiffnessCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(stiffness_, other->stiffness_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetStiffnessCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sea_2eproto_getter, &descriptor_table_sea_2eproto_once,
      file_level_metadata_sea_2eproto[3]);
}

// ===================================================================

class SetDampingCommand::_Internal {
 public:
};

SetDampingCommand::SetDampingCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sea.SetDampingCommand)
}
SetDampingCommand::SetDampingCommand(const SetDampingCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  damping_ = from.damping_;
  // @@protoc_insertion_point(copy_constructor:sea.SetDampingCommand)
}

inline void SetDampingCommand::SharedCtor() {
damping_ = 0;
}

SetDampingCommand::~SetDampingCommand() {
  // @@protoc_insertion_point(destructor:sea.SetDampingCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetDampingCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetDampingCommand::ArenaDtor(void* object) {
  SetDampingCommand* _this = reinterpret_cast< SetDampingCommand* >(object);
  (void)_this;
}
void SetDampingCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetDampingCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetDampingCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:sea.SetDampingCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  damping_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetDampingCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double damping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          damping_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetDampingCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sea.SetDampingCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double damping = 1;
  if (!(this->_internal_damping() <= 0 && this->_internal_damping() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_damping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea.SetDampingCommand)
  return target;
}

size_t SetDampingCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea.SetDampingCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double damping = 1;
  if (!(this->_internal_damping() <= 0 && this->_internal_damping() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetDampingCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetDampingCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetDampingCommand::GetClassData() const { return &_class_data_; }

void SetDampingCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetDampingCommand *>(to)->MergeFrom(
      static_cast<const SetDampingCommand &>(from));
}


void SetDampingCommand::MergeFrom(const SetDampingCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea.SetDampingCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_damping() <= 0 && from._internal_damping() >= 0)) {
    _internal_set_damping(from._internal_damping());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetDampingCommand::CopyFrom(const SetDampingCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea.SetDampingCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDampingCommand::IsInitialized() const {
  return true;
}

void SetDampingCommand::InternalSwap(SetDampingCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(damping_, other->damping_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetDampingCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sea_2eproto_getter, &descriptor_table_sea_2eproto_once,
      file_level_metadata_sea_2eproto[4]);
}

// ===================================================================

class SetWorkModeCommand::_Internal {
 public:
};

SetWorkModeCommand::SetWorkModeCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sea.SetWorkModeCommand)
}
SetWorkModeCommand::SetWorkModeCommand(const SetWorkModeCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  work_mode_ = from.work_mode_;
  // @@protoc_insertion_point(copy_constructor:sea.SetWorkModeCommand)
}

inline void SetWorkModeCommand::SharedCtor() {
work_mode_ = 0;
}

SetWorkModeCommand::~SetWorkModeCommand() {
  // @@protoc_insertion_point(destructor:sea.SetWorkModeCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetWorkModeCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetWorkModeCommand::ArenaDtor(void* object) {
  SetWorkModeCommand* _this = reinterpret_cast< SetWorkModeCommand* >(object);
  (void)_this;
}
void SetWorkModeCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetWorkModeCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetWorkModeCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:sea.SetWorkModeCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  work_mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetWorkModeCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sea.WorkMode work_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_work_mode(static_cast<::sea::WorkMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetWorkModeCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sea.SetWorkModeCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea.WorkMode work_mode = 1;
  if (this->_internal_work_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_work_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea.SetWorkModeCommand)
  return target;
}

size_t SetWorkModeCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea.SetWorkModeCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sea.WorkMode work_mode = 1;
  if (this->_internal_work_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_work_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetWorkModeCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetWorkModeCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetWorkModeCommand::GetClassData() const { return &_class_data_; }

void SetWorkModeCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetWorkModeCommand *>(to)->MergeFrom(
      static_cast<const SetWorkModeCommand &>(from));
}


void SetWorkModeCommand::MergeFrom(const SetWorkModeCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea.SetWorkModeCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_work_mode() != 0) {
    _internal_set_work_mode(from._internal_work_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetWorkModeCommand::CopyFrom(const SetWorkModeCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea.SetWorkModeCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetWorkModeCommand::IsInitialized() const {
  return true;
}

void SetWorkModeCommand::InternalSwap(SetWorkModeCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(work_mode_, other->work_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetWorkModeCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sea_2eproto_getter, &descriptor_table_sea_2eproto_once,
      file_level_metadata_sea_2eproto[5]);
}

// ===================================================================

class EnableCommand::_Internal {
 public:
};

EnableCommand::EnableCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sea.EnableCommand)
}
EnableCommand::EnableCommand(const EnableCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:sea.EnableCommand)
}

inline void EnableCommand::SharedCtor() {
enable_ = false;
}

EnableCommand::~EnableCommand() {
  // @@protoc_insertion_point(destructor:sea.EnableCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EnableCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableCommand::ArenaDtor(void* object) {
  EnableCommand* _this = reinterpret_cast< EnableCommand* >(object);
  (void)_this;
}
void EnableCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnableCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:sea.EnableCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnableCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sea.EnableCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea.EnableCommand)
  return target;
}

size_t EnableCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea.EnableCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->_internal_enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnableCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnableCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnableCommand::GetClassData() const { return &_class_data_; }

void EnableCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EnableCommand *>(to)->MergeFrom(
      static_cast<const EnableCommand &>(from));
}


void EnableCommand::MergeFrom(const EnableCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea.EnableCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnableCommand::CopyFrom(const EnableCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea.EnableCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableCommand::IsInitialized() const {
  return true;
}

void EnableCommand::InternalSwap(EnableCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnableCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sea_2eproto_getter, &descriptor_table_sea_2eproto_once,
      file_level_metadata_sea_2eproto[6]);
}

// ===================================================================

class SetPositionCommand::_Internal {
 public:
};

SetPositionCommand::SetPositionCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sea.SetPositionCommand)
}
SetPositionCommand::SetPositionCommand(const SetPositionCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  position_ = from.position_;
  // @@protoc_insertion_point(copy_constructor:sea.SetPositionCommand)
}

inline void SetPositionCommand::SharedCtor() {
position_ = 0;
}

SetPositionCommand::~SetPositionCommand() {
  // @@protoc_insertion_point(destructor:sea.SetPositionCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetPositionCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetPositionCommand::ArenaDtor(void* object) {
  SetPositionCommand* _this = reinterpret_cast< SetPositionCommand* >(object);
  (void)_this;
}
void SetPositionCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPositionCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetPositionCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:sea.SetPositionCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPositionCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPositionCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sea.SetPositionCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double position = 1;
  if (!(this->_internal_position() <= 0 && this->_internal_position() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea.SetPositionCommand)
  return target;
}

size_t SetPositionCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea.SetPositionCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double position = 1;
  if (!(this->_internal_position() <= 0 && this->_internal_position() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPositionCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetPositionCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPositionCommand::GetClassData() const { return &_class_data_; }

void SetPositionCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetPositionCommand *>(to)->MergeFrom(
      static_cast<const SetPositionCommand &>(from));
}


void SetPositionCommand::MergeFrom(const SetPositionCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea.SetPositionCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_position() <= 0 && from._internal_position() >= 0)) {
    _internal_set_position(from._internal_position());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetPositionCommand::CopyFrom(const SetPositionCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea.SetPositionCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPositionCommand::IsInitialized() const {
  return true;
}

void SetPositionCommand::InternalSwap(SetPositionCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPositionCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sea_2eproto_getter, &descriptor_table_sea_2eproto_once,
      file_level_metadata_sea_2eproto[7]);
}

// ===================================================================

class SetVelocityCommand::_Internal {
 public:
};

SetVelocityCommand::SetVelocityCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sea.SetVelocityCommand)
}
SetVelocityCommand::SetVelocityCommand(const SetVelocityCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  velocity_ = from.velocity_;
  // @@protoc_insertion_point(copy_constructor:sea.SetVelocityCommand)
}

inline void SetVelocityCommand::SharedCtor() {
velocity_ = 0;
}

SetVelocityCommand::~SetVelocityCommand() {
  // @@protoc_insertion_point(destructor:sea.SetVelocityCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetVelocityCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetVelocityCommand::ArenaDtor(void* object) {
  SetVelocityCommand* _this = reinterpret_cast< SetVelocityCommand* >(object);
  (void)_this;
}
void SetVelocityCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetVelocityCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetVelocityCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:sea.SetVelocityCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  velocity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetVelocityCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double velocity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetVelocityCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sea.SetVelocityCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double velocity = 1;
  if (!(this->_internal_velocity() <= 0 && this->_internal_velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_velocity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea.SetVelocityCommand)
  return target;
}

size_t SetVelocityCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea.SetVelocityCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double velocity = 1;
  if (!(this->_internal_velocity() <= 0 && this->_internal_velocity() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetVelocityCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetVelocityCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetVelocityCommand::GetClassData() const { return &_class_data_; }

void SetVelocityCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetVelocityCommand *>(to)->MergeFrom(
      static_cast<const SetVelocityCommand &>(from));
}


void SetVelocityCommand::MergeFrom(const SetVelocityCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea.SetVelocityCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_velocity() <= 0 && from._internal_velocity() >= 0)) {
    _internal_set_velocity(from._internal_velocity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetVelocityCommand::CopyFrom(const SetVelocityCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea.SetVelocityCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVelocityCommand::IsInitialized() const {
  return true;
}

void SetVelocityCommand::InternalSwap(SetVelocityCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(velocity_, other->velocity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetVelocityCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sea_2eproto_getter, &descriptor_table_sea_2eproto_once,
      file_level_metadata_sea_2eproto[8]);
}

// ===================================================================

class ControlCommand::_Internal {
 public:
  static const ::sea::SetStiffnessCommand& set_stiffness(const ControlCommand* msg);
  static const ::sea::SetDampingCommand& set_damping(const ControlCommand* msg);
  static const ::sea::SetWorkModeCommand& set_work_mode(const ControlCommand* msg);
  static const ::sea::EnableCommand& enable(const ControlCommand* msg);
  static const ::sea::SetPositionCommand& set_position(const ControlCommand* msg);
  static const ::sea::SetVelocityCommand& set_velocity(const ControlCommand* msg);
};

const ::sea::SetStiffnessCommand&
ControlCommand::_Internal::set_stiffness(const ControlCommand* msg) {
  return *msg->command_.set_stiffness_;
}
const ::sea::SetDampingCommand&
ControlCommand::_Internal::set_damping(const ControlCommand* msg) {
  return *msg->command_.set_damping_;
}
const ::sea::SetWorkModeCommand&
ControlCommand::_Internal::set_work_mode(const ControlCommand* msg) {
  return *msg->command_.set_work_mode_;
}
const ::sea::EnableCommand&
ControlCommand::_Internal::enable(const ControlCommand* msg) {
  return *msg->command_.enable_;
}
const ::sea::SetPositionCommand&
ControlCommand::_Internal::set_position(const ControlCommand* msg) {
  return *msg->command_.set_position_;
}
const ::sea::SetVelocityCommand&
ControlCommand::_Internal::set_velocity(const ControlCommand* msg) {
  return *msg->command_.set_velocity_;
}
void ControlCommand::set_allocated_set_stiffness(::sea::SetStiffnessCommand* set_stiffness) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (set_stiffness) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sea::SetStiffnessCommand>::GetOwningArena(set_stiffness);
    if (message_arena != submessage_arena) {
      set_stiffness = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_stiffness, submessage_arena);
    }
    set_has_set_stiffness();
    command_.set_stiffness_ = set_stiffness;
  }
  // @@protoc_insertion_point(field_set_allocated:sea.ControlCommand.set_stiffness)
}
void ControlCommand::set_allocated_set_damping(::sea::SetDampingCommand* set_damping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (set_damping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sea::SetDampingCommand>::GetOwningArena(set_damping);
    if (message_arena != submessage_arena) {
      set_damping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_damping, submessage_arena);
    }
    set_has_set_damping();
    command_.set_damping_ = set_damping;
  }
  // @@protoc_insertion_point(field_set_allocated:sea.ControlCommand.set_damping)
}
void ControlCommand::set_allocated_set_work_mode(::sea::SetWorkModeCommand* set_work_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (set_work_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sea::SetWorkModeCommand>::GetOwningArena(set_work_mode);
    if (message_arena != submessage_arena) {
      set_work_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_work_mode, submessage_arena);
    }
    set_has_set_work_mode();
    command_.set_work_mode_ = set_work_mode;
  }
  // @@protoc_insertion_point(field_set_allocated:sea.ControlCommand.set_work_mode)
}
void ControlCommand::set_allocated_enable(::sea::EnableCommand* enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sea::EnableCommand>::GetOwningArena(enable);
    if (message_arena != submessage_arena) {
      enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable, submessage_arena);
    }
    set_has_enable();
    command_.enable_ = enable;
  }
  // @@protoc_insertion_point(field_set_allocated:sea.ControlCommand.enable)
}
void ControlCommand::set_allocated_set_position(::sea::SetPositionCommand* set_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (set_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sea::SetPositionCommand>::GetOwningArena(set_position);
    if (message_arena != submessage_arena) {
      set_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_position, submessage_arena);
    }
    set_has_set_position();
    command_.set_position_ = set_position;
  }
  // @@protoc_insertion_point(field_set_allocated:sea.ControlCommand.set_position)
}
void ControlCommand::set_allocated_set_velocity(::sea::SetVelocityCommand* set_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (set_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sea::SetVelocityCommand>::GetOwningArena(set_velocity);
    if (message_arena != submessage_arena) {
      set_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_velocity, submessage_arena);
    }
    set_has_set_velocity();
    command_.set_velocity_ = set_velocity;
  }
  // @@protoc_insertion_point(field_set_allocated:sea.ControlCommand.set_velocity)
}
ControlCommand::ControlCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sea.ControlCommand)
}
ControlCommand::ControlCommand(const ControlCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_command();
  switch (from.command_case()) {
    case kSetStiffness: {
      _internal_mutable_set_stiffness()->::sea::SetStiffnessCommand::MergeFrom(from._internal_set_stiffness());
      break;
    }
    case kSetDamping: {
      _internal_mutable_set_damping()->::sea::SetDampingCommand::MergeFrom(from._internal_set_damping());
      break;
    }
    case kSetWorkMode: {
      _internal_mutable_set_work_mode()->::sea::SetWorkModeCommand::MergeFrom(from._internal_set_work_mode());
      break;
    }
    case kEnable: {
      _internal_mutable_enable()->::sea::EnableCommand::MergeFrom(from._internal_enable());
      break;
    }
    case kSetPosition: {
      _internal_mutable_set_position()->::sea::SetPositionCommand::MergeFrom(from._internal_set_position());
      break;
    }
    case kSetVelocity: {
      _internal_mutable_set_velocity()->::sea::SetVelocityCommand::MergeFrom(from._internal_set_velocity());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sea.ControlCommand)
}

inline void ControlCommand::SharedCtor() {
clear_has_command();
}

ControlCommand::~ControlCommand() {
  // @@protoc_insertion_point(destructor:sea.ControlCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_command()) {
    clear_command();
  }
}

void ControlCommand::ArenaDtor(void* object) {
  ControlCommand* _this = reinterpret_cast< ControlCommand* >(object);
  (void)_this;
}
void ControlCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlCommand::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:sea.ControlCommand)
  switch (command_case()) {
    case kSetStiffness: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.set_stiffness_;
      }
      break;
    }
    case kSetDamping: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.set_damping_;
      }
      break;
    }
    case kSetWorkMode: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.set_work_mode_;
      }
      break;
    }
    case kEnable: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.enable_;
      }
      break;
    }
    case kSetPosition: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.set_position_;
      }
      break;
    }
    case kSetVelocity: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.set_velocity_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void ControlCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:sea.ControlCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_command();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sea.SetStiffnessCommand set_stiffness = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_stiffness(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sea.SetDampingCommand set_damping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_damping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sea.SetWorkModeCommand set_work_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_work_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sea.EnableCommand enable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sea.SetPositionCommand set_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sea.SetVelocityCommand set_velocity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sea.ControlCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sea.SetStiffnessCommand set_stiffness = 1;
  if (_internal_has_set_stiffness()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::set_stiffness(this), target, stream);
  }

  // .sea.SetDampingCommand set_damping = 2;
  if (_internal_has_set_damping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::set_damping(this), target, stream);
  }

  // .sea.SetWorkModeCommand set_work_mode = 3;
  if (_internal_has_set_work_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::set_work_mode(this), target, stream);
  }

  // .sea.EnableCommand enable = 4;
  if (_internal_has_enable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::enable(this), target, stream);
  }

  // .sea.SetPositionCommand set_position = 5;
  if (_internal_has_set_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::set_position(this), target, stream);
  }

  // .sea.SetVelocityCommand set_velocity = 6;
  if (_internal_has_set_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::set_velocity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea.ControlCommand)
  return target;
}

size_t ControlCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea.ControlCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (command_case()) {
    // .sea.SetStiffnessCommand set_stiffness = 1;
    case kSetStiffness: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.set_stiffness_);
      break;
    }
    // .sea.SetDampingCommand set_damping = 2;
    case kSetDamping: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.set_damping_);
      break;
    }
    // .sea.SetWorkModeCommand set_work_mode = 3;
    case kSetWorkMode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.set_work_mode_);
      break;
    }
    // .sea.EnableCommand enable = 4;
    case kEnable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.enable_);
      break;
    }
    // .sea.SetPositionCommand set_position = 5;
    case kSetPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.set_position_);
      break;
    }
    // .sea.SetVelocityCommand set_velocity = 6;
    case kSetVelocity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.set_velocity_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlCommand::GetClassData() const { return &_class_data_; }

void ControlCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ControlCommand *>(to)->MergeFrom(
      static_cast<const ControlCommand &>(from));
}


void ControlCommand::MergeFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea.ControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.command_case()) {
    case kSetStiffness: {
      _internal_mutable_set_stiffness()->::sea::SetStiffnessCommand::MergeFrom(from._internal_set_stiffness());
      break;
    }
    case kSetDamping: {
      _internal_mutable_set_damping()->::sea::SetDampingCommand::MergeFrom(from._internal_set_damping());
      break;
    }
    case kSetWorkMode: {
      _internal_mutable_set_work_mode()->::sea::SetWorkModeCommand::MergeFrom(from._internal_set_work_mode());
      break;
    }
    case kEnable: {
      _internal_mutable_enable()->::sea::EnableCommand::MergeFrom(from._internal_enable());
      break;
    }
    case kSetPosition: {
      _internal_mutable_set_position()->::sea::SetPositionCommand::MergeFrom(from._internal_set_position());
      break;
    }
    case kSetVelocity: {
      _internal_mutable_set_velocity()->::sea::SetVelocityCommand::MergeFrom(from._internal_set_velocity());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlCommand::CopyFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea.ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCommand::IsInitialized() const {
  return true;
}

void ControlCommand::InternalSwap(ControlCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sea_2eproto_getter, &descriptor_table_sea_2eproto_once,
      file_level_metadata_sea_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sea
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sea::StatusFeedback* Arena::CreateMaybeMessage< ::sea::StatusFeedback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sea::StatusFeedback >(arena);
}
template<> PROTOBUF_NOINLINE ::sea::ConfigFeedback* Arena::CreateMaybeMessage< ::sea::ConfigFeedback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sea::ConfigFeedback >(arena);
}
template<> PROTOBUF_NOINLINE ::sea::ControlFeedback* Arena::CreateMaybeMessage< ::sea::ControlFeedback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sea::ControlFeedback >(arena);
}
template<> PROTOBUF_NOINLINE ::sea::SetStiffnessCommand* Arena::CreateMaybeMessage< ::sea::SetStiffnessCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sea::SetStiffnessCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::sea::SetDampingCommand* Arena::CreateMaybeMessage< ::sea::SetDampingCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sea::SetDampingCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::sea::SetWorkModeCommand* Arena::CreateMaybeMessage< ::sea::SetWorkModeCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sea::SetWorkModeCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::sea::EnableCommand* Arena::CreateMaybeMessage< ::sea::EnableCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sea::EnableCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::sea::SetPositionCommand* Arena::CreateMaybeMessage< ::sea::SetPositionCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sea::SetPositionCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::sea::SetVelocityCommand* Arena::CreateMaybeMessage< ::sea::SetVelocityCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sea::SetVelocityCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::sea::ControlCommand* Arena::CreateMaybeMessage< ::sea::ControlCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sea::ControlCommand >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
